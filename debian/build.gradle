apply plugin: 'java'
apply plugin: 'maven'

/* See the API Level defined in version_defaults.mk provided by
 * src:android-platform-build.
 */
version = '23'
group = 'com.android'

ext {
  srcLocations = [
    '../core/java',
    '../drm/java',
    '../graphics/java',
    '../keystore/java',
    '../location/java',
    '../media/java',
    '../media/mca/effect/java',
    '../media/mca/filterfw/java',
    '../media/mca/filterpacks/java',
    '../opengl/java',
    '../rs/java',
    '../sax/java',
    '../telecomm/java',
    '../telephony/java',
    '../wifi/java'
  ]
}

repositories {
  maven { url 'file:///usr/share/maven-repo' }
}

dependencies {
  compile 'com.android:conscrypt:debian'
  compile 'com.android:okhttp:debian'
  compile 'com.googlecode.libphonenumber:geocoder:2.x'
  compile 'com.googlecode.libphonenumber:libphonenumber:debian'
  compile 'com.ibm.icu:icu4j:debian'
  compile 'junit:junit:4.x'
  compile 'org.bouncycastle:bcprov:debian'
  compile 'org.ccil.cowan.tagsoup:tagsoup:debian'
}

sourceSets.main {
  java {
    for (def dir in srcLocations) { srcDir(dir) }
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/dalvik/main/java'
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/dex/main/java'
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/json/main/java'
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/libart/main/java'
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/luni/main/java'
    srcDir 'file:///usr/src/android-platform-libcore-6.0.1/xml/main/java'
    srcDir "${buildDir}/aidl"
    srcDir "${rootDir}/tmp/aapt"
  }
  resources {
    srcDir '../core/res/assets'
    srcDir '../core/res/res'
    exclude '**/values*/**'
  }
}

jar.manifest {
  attributes 'Class-Path': configurations.compile.getDependencies().collect {
    if (it.getGroup() == 'com.android') {
      "/usr/share/java/com.android.${it.getName()}.jar"
    } else {
      "/usr/share/java/${it.getName()}.jar"
    }
  }.join(' ')
}

javadoc {
  options {
    links 'file:///usr/share/doc/default-jdk-doc/api'
  }
}

task poms {
  pom {
    project {
      artifactId project.name
      version project.version
    }
  }.writeTo("${buildDir}/${project.name}.pom")
}

task aidl {
  def aidlFiles = files(srcLocations).getAsFileTree().filter {
    it.getPath().endsWith('.aidl')
  }.getFiles()
  
  inputs.files aidlFiles
  outputs.dir "${buildDir}/aidl"
  
  doFirst {
    mkdir "${buildDir}/aidl"
    def importPaths = ''
    srcLocations.each { importPaths += "-I${file(it).getPath()} " }
    aidlFiles.each {
      def command = "./aidl $importPaths -o${buildDir}/aidl ${it.getPath()}"
      command.execute().waitFor()
    }
  }
}

clean.doLast {
  delete "${buildDir}/*.pom"
  delete "${buildDir}/aidl"
}
